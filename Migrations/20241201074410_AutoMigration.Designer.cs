// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(WebApplicationContext))]
    [Migration("20241201074410_AutoMigration")]
    partial class AutoMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MuscleStrengthExercise", b =>
                {
                    b.Property<int>("MusclesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthExercisesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MusclesId", "StrengthExercisesId");

                    b.HasIndex("StrengthExercisesId");

                    b.ToTable("MuscleStrengthExercise");
                });

            modelBuilder.Entity("WebApp.Entities.CarExerciseInTraining", b =>
                {
                    b.Property<int>("CardioExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardioExerciseId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("CarExerciseInTrainings");
                });

            modelBuilder.Entity("WebApp.Entities.CarExerciseParameters", b =>
                {
                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarExerciseInTrainingTrainingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarExerciseInTrainingCardioExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Seconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Interval", "CarExerciseInTrainingTrainingId", "CarExerciseInTrainingCardioExerciseId");

                    b.HasIndex("CarExerciseInTrainingTrainingId", "CarExerciseInTrainingCardioExerciseId");

                    b.ToTable("CarExerciseParameters");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CardioExercises", (string)null);
                });

            modelBuilder.Entity("WebApp.Entities.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Muscles");
                });

            modelBuilder.Entity("WebApp.Entities.StrExerciseInTraining", b =>
                {
                    b.Property<int>("StrengthExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StrengthExerciseId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("StrExerciseInTrainings");
                });

            modelBuilder.Entity("WebApp.Entities.StrExerciseParameters", b =>
                {
                    b.Property<int>("Set")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrExerciseInTrainingTrainingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrExerciseInTrainingStrengthExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Repetitions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Set", "StrExerciseInTrainingTrainingId", "StrExerciseInTrainingStrengthExerciseId");

                    b.HasIndex("StrExerciseInTrainingTrainingId", "StrExerciseInTrainingStrengthExerciseId");

                    b.ToTable("StrExerciseParameters");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StrengthExercises", (string)null);
                });

            modelBuilder.Entity("WebApp.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("WebApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MuscleStrengthExercise", b =>
                {
                    b.HasOne("WebApp.Entities.Muscle", null)
                        .WithMany()
                        .HasForeignKey("MusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.StrengthExercise", null)
                        .WithMany()
                        .HasForeignKey("StrengthExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Entities.CarExerciseInTraining", b =>
                {
                    b.HasOne("WebApp.Entities.CardioExercise", "CardioExercise")
                        .WithMany("CarExercisesInTrainings")
                        .HasForeignKey("CardioExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.Training", "Training")
                        .WithMany("CarExerciseInTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardioExercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("WebApp.Entities.CarExerciseParameters", b =>
                {
                    b.HasOne("WebApp.Entities.CarExerciseInTraining", "CarExerciseInTraining")
                        .WithMany("CarExerciseParameters")
                        .HasForeignKey("CarExerciseInTrainingTrainingId", "CarExerciseInTrainingCardioExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarExerciseInTraining");
                });

            modelBuilder.Entity("WebApp.Entities.StrExerciseInTraining", b =>
                {
                    b.HasOne("WebApp.Entities.StrengthExercise", "StrengthExercise")
                        .WithMany("StrExerciseInTrainings")
                        .HasForeignKey("StrengthExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.Training", "Training")
                        .WithMany("StrExerciseInTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrengthExercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("WebApp.Entities.StrExerciseParameters", b =>
                {
                    b.HasOne("WebApp.Entities.StrExerciseInTraining", "StrExerciseInTraining")
                        .WithMany("StrExerciseParameters")
                        .HasForeignKey("StrExerciseInTrainingTrainingId", "StrExerciseInTrainingStrengthExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrExerciseInTraining");
                });

            modelBuilder.Entity("WebApp.Entities.Training", b =>
                {
                    b.HasOne("WebApp.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Entities.CarExerciseInTraining", b =>
                {
                    b.Navigation("CarExerciseParameters");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExercise", b =>
                {
                    b.Navigation("CarExercisesInTrainings");
                });

            modelBuilder.Entity("WebApp.Entities.StrExerciseInTraining", b =>
                {
                    b.Navigation("StrExerciseParameters");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExercise", b =>
                {
                    b.Navigation("StrExerciseInTrainings");
                });

            modelBuilder.Entity("WebApp.Entities.Training", b =>
                {
                    b.Navigation("CarExerciseInTrainings");

                    b.Navigation("StrExerciseInTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
