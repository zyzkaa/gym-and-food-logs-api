// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(WebAppContext))]
    partial class WebAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MealMealPlan", b =>
                {
                    b.Property<int>("MealPlansId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MealPlansId", "MealsId");

                    b.HasIndex("MealsId");

                    b.ToTable("MealMealPlan");
                });

            modelBuilder.Entity("MuscleStrengthExercise", b =>
                {
                    b.Property<int>("MusclesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthExercisesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MusclesId", "StrengthExercisesId");

                    b.HasIndex("StrengthExercisesId");

                    b.ToTable("MuscleStrengthExercise");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CardioExercises", (string)null);
                });

            modelBuilder.Entity("WebApp.Entities.CardioExerciseInTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardioExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardioExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("CardioExerciseInTraining");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExerciseParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardioExerciseInTrainingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Inteval")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Speed")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardioExerciseInTrainingId");

                    b.ToTable("CardioExerciseParams");
                });

            modelBuilder.Entity("WebApp.Entities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EditorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OriginalMealID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatorID");

                    b.HasIndex("EditorID");

                    b.HasIndex("IsShared");

                    b.HasIndex("OriginalMealID");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("WebApp.Entities.MealIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("ProductId");

                    b.ToTable("MealIngredients");
                });

            modelBuilder.Entity("WebApp.Entities.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("WebApp.Entities.Met", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("MetValue")
                        .HasColumnType("REAL");

                    b.Property<double>("StartSpeed")
                        .HasColumnType("REAL");

                    b.Property<int>("cardioExerciseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("cardioExerciseId");

                    b.ToTable("Mets");
                });

            modelBuilder.Entity("WebApp.Entities.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Muscles");
                });

            modelBuilder.Entity("WebApp.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaloriesPer100g")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CarbsPer100g")
                        .HasColumnType("REAL");

                    b.Property<double>("FatPer100g")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ProteinPer100g")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StrengthExercises", (string)null);
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExerciseInTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StrengthExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("StrengthExercisesInTraining");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExerciseParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Repetitions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Set")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthExerciseInTrainingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StrengthExerciseInTrainingId");

                    b.ToTable("StrengthExerciseParams");
                });

            modelBuilder.Entity("WebApp.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("WebApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MealMealPlan", b =>
                {
                    b.HasOne("WebApp.Entities.MealPlan", null)
                        .WithMany()
                        .HasForeignKey("MealPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MuscleStrengthExercise", b =>
                {
                    b.HasOne("WebApp.Entities.Muscle", null)
                        .WithMany()
                        .HasForeignKey("MusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.StrengthExercise", null)
                        .WithMany()
                        .HasForeignKey("StrengthExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Entities.CardioExerciseInTraining", b =>
                {
                    b.HasOne("WebApp.Entities.CardioExercise", "CardioExercise")
                        .WithMany()
                        .HasForeignKey("CardioExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.Training", "Training")
                        .WithMany("CardioExercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardioExercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExerciseParams", b =>
                {
                    b.HasOne("WebApp.Entities.CardioExerciseInTraining", "CardioExerciseInTraining")
                        .WithMany("Params")
                        .HasForeignKey("CardioExerciseInTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardioExerciseInTraining");
                });

            modelBuilder.Entity("WebApp.Entities.Meal", b =>
                {
                    b.HasOne("WebApp.Entities.User", "Creator")
                        .WithMany("Meals")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApp.Entities.Meal", "OriginalMeal")
                        .WithMany("ClonedMeals")
                        .HasForeignKey("OriginalMealID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Editor");

                    b.Navigation("OriginalMeal");
                });

            modelBuilder.Entity("WebApp.Entities.MealIngredient", b =>
                {
                    b.HasOne("WebApp.Entities.Meal", "Meal")
                        .WithMany("Ingredients")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.Product", "Product")
                        .WithMany("MealIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApp.Entities.MealPlan", b =>
                {
                    b.HasOne("WebApp.Entities.User", "User")
                        .WithMany("MealPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Entities.Met", b =>
                {
                    b.HasOne("WebApp.Entities.CardioExercise", "cardioExercise")
                        .WithMany("Mets")
                        .HasForeignKey("cardioExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cardioExercise");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExerciseInTraining", b =>
                {
                    b.HasOne("WebApp.Entities.StrengthExercise", "StrengthExercise")
                        .WithMany()
                        .HasForeignKey("StrengthExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Entities.Training", "Training")
                        .WithMany("StrengthExercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrengthExercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExerciseParams", b =>
                {
                    b.HasOne("WebApp.Entities.StrengthExerciseInTraining", "StrengthExerciseInTraining")
                        .WithMany("Params")
                        .HasForeignKey("StrengthExerciseInTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrengthExerciseInTraining");
                });

            modelBuilder.Entity("WebApp.Entities.Training", b =>
                {
                    b.HasOne("WebApp.Entities.User", "User")
                        .WithMany("Trainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExercise", b =>
                {
                    b.Navigation("Mets");
                });

            modelBuilder.Entity("WebApp.Entities.CardioExerciseInTraining", b =>
                {
                    b.Navigation("Params");
                });

            modelBuilder.Entity("WebApp.Entities.Meal", b =>
                {
                    b.Navigation("ClonedMeals");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("WebApp.Entities.Product", b =>
                {
                    b.Navigation("MealIngredients");
                });

            modelBuilder.Entity("WebApp.Entities.StrengthExerciseInTraining", b =>
                {
                    b.Navigation("Params");
                });

            modelBuilder.Entity("WebApp.Entities.Training", b =>
                {
                    b.Navigation("CardioExercises");

                    b.Navigation("StrengthExercises");
                });

            modelBuilder.Entity("WebApp.Entities.User", b =>
                {
                    b.Navigation("MealPlans");

                    b.Navigation("Meals");

                    b.Navigation("Trainings");
                });
#pragma warning restore 612, 618
        }
    }
}
